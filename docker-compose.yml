version: '3.8'

services:
  ############################################
  # LiteLLM - LLM Proxy
  ############################################
  litellm:
    image: ghcr.io/berriai/litellm:main-stable # 안정적인 최신 LiteLLM 이미지 사용
    container_name: litellm_proxy
    ports:
      - "4000:4000" # 호스트의 4000번 포트를 컨테이너의 4000번 포트로 매핑 (필요에 따라 변경 가능)
    environment:
      # .env 파일 또는 직접 여기에 API 키를 설정하세요.
      # LiteLLM 설정 파일 (config.yaml) 내에서도 설정할 수 있습니다.
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_API_KEY=${AZURE_API_KEY}
      - AZURE_API_BASE=${AZURE_API_BASE}
      - AZURE_API_VERSION=${AZURE_API_VERSION}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - LITELLM_SALT_KEY=${LITELLM_SALT_KEY}
      - LITELLM_LICENSE=${LITELLM_LICENSE}
      - DATABASE_URL=${DATABASE_URL}
      # 추가 클라우드 서비스 또는 로컬 모델 API 키/주소 등
      # - OLLAMA_API_BASE_URL=http://host.docker.internal:11434 # Docker 호스트에서 Ollama 실행 시 예시
    volumes:
      - ./litellm_config.yaml:/app/config.yaml # 호스트의 설정 파일을 컨테이너 내부로 마운트
      # - litellm_data:/app/data # 필요시 LiteLLM 데이터 볼륨 (예: 캐시)
    command: ["--host", "0.0.0.0", "--port", "4000", "--config", "/app/config.yaml", "--detailed_debug"] # 0.0.0.0으로 설정하여 컨테이너 외부 접근 허용 및 설정 파일 사용
    depends_on:
      - postgres # postgres이 먼저 시작되도록 의존성 설정

    networks:
      - webui_network
    restart: unless-stopped

  ############################################
  # OpenWebUI - Web Interface for LLMs
  ############################################
  open-webui:
    image: ghcr.io/open-webui/open-webui:main # 공식 OpenWebUI 이미지
    container_name: open_webui
    ports:
      - "8080:8080" # 호스트의 8080 포트를 컨테이너의 8080 포트로 매핑 (기본값, 충돌 시 변경)
    environment:
      # OpenWebUI가 LiteLLM 프록시를 바라보도록 설정합니다.
      # Docker 내부 네트워크에서는 서비스 이름(litellm)으로 접근합니다.
      - OPENAI_API_BASE_URL=http://litellm:4000/ # LiteLLM 서비스 주소
      - OPENAI_API_KEY=dummy-key # LiteLLM이 자체 인증을 처리하므로 여기서는 임의의 값 사용 가능 (LiteLLM 설정에 따라 필요 없을 수도 있음)
      # 필요에 따라 OpenWebUI의 다른 환경 변수 추가 가능
      # - ENABLE_SIGNUP=false # 사용자 가입 비활성화 예시
    volumes:
      - open_webui_data:/app/backend/data # OpenWebUI 설정 및 데이터 저장을 위한 볼륨
    depends_on:
      - litellm # LiteLLM이 먼저 시작되도록 의존성 설정
    networks:
      - webui_network
    restart: unless-stopped

  ############################################
  # PostgreSQL Database (NEW)
  ############################################
  postgres:
    image: postgres:16 # PostgreSQL 버전 16 이미지 사용
    container_name: postgres_db
    environment:
      # .env 파일에서 PostgreSQL 설정값을 가져옵니다.
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data # 데이터베이스 데이터 영속화를 위한 볼륨 마운트
    ports:
      - "5432:5432" # 호스트와 포트 매핑 (외부 DB 툴 연결용, 필요 없으면 제거 가능)
    networks:
      - webui_network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus_monitor
    volumes:
      - ./prometheus_config:/etc/prometheus  # 로컬 디렉토리를 컨테이너 디렉토리에 마운트
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml' # 설정 파일 경로는 그대로 유지 (마운트된 디렉토리 기준)
    ports:
      - "9090:9090" # Prometheus 웹 UI 포트
    networks:
      - webui_network
    restart: unless-stopped

networks:
  webui_network:
    driver: bridge # Docker의 기본 브릿지 네트워크 사용

volumes:
  postgres_data: # PostgreSQL 데이터 볼륨
  open_webui_data: # OpenWebUI 데이터를 영속적으로 저장할 명명된 볼륨
  prometheus_data: # Prometheus 데이터 볼륨

  # litellm_data: # LiteLLM 데이터용 볼륨 (필요시 주석 해제)