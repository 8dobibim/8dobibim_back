# .github/workflows/deploy-aws.yml

name: Deploy to AWS EC2

on:
  push:
    branches:
      - main # main 브랜치에 push될 때마다 실행

jobs:
  deploy:
    runs-on: ubuntu-latest # GitHub Actions 실행 환경

    env:
      # Terraform 명령을 실행할 디렉토리 설정
      TF_WORKING_DIR: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # --- AWS 인증 ---
      # GitHub Secrets에 저장된 AWS 자격증명 사용
      # AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY 환경 변수를 자동으로 설정합니다.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # GitHub Secrets에 저장된 Access Key ID
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # GitHub Secrets에 저장된 Secret Access Key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # 사용할 AWS 리전 (GitHub Secret으로 관리하거나, Terraform 변수로 전달)
          # 여기서는 워크플로우 환경 변수 또는 Terraform 변수로 전달하는 방식 사용
          aws-region: ${{ vars.AWS_REGION || 'ap-northeast-2' }} # GitHub Variables 또는 기본값 사용

      # --- Terraform 환경 변수 설정 ---
      # Terraform 변수로 전달할 민감 정보 (API 키 등)는 여기서 환경 변수로 설정합니다.
      # TF_VAR_NAME 형식의 환경 변수는 Terraform의 NAME 변수에 자동으로 할당됩니다.
      - name: Set Terraform variables via Environment Variables
        run: |
          echo "TF_VAR_openai_api_key=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          # 만약 AWS 리전, AMI ID, VPC ID, Subnet ID 등을 Secret 또는 Variable로 관리한다면 여기서 설정
          # echo "TF_VAR_aws_region=${{ vars.AWS_REGION }}" >> $GITHUB_ENV # GitHub Variables 예시
          # echo "TF_VAR_ami_id=${{ vars.AMI_ID_UBUNTU_2004 }}" >> $GITHUB_ENV
          # echo "TF_VAR_vpc_id=${{ vars.VPC_ID_DEV }}" >> $GITHUB_ENV
          # echo "TF_VAR_subnet_id=${{ vars.SUBNET_ID_DEV }}" >> $GITHUB_ENV
          # echo "TF_VAR_key_name=${{ vars.SSH_KEY_NAME }}" >> $GITHUB_ENV
          # echo "TF_VAR_instance_name=my-llm-instance-${{ github.run_number }}" >> $GITHUB_ENV # 실행 번호로 인스턴스 이름 동적 생성 예시

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        run: terraform plan \
          -var-file="terraform.tfvars" \ # 비민감성 기본 변수 파일 사용
          # GitHub Secrets 또는 Variables에서 가져온 값으로 변수 재정의
          -var="aws_region=${{ vars.AWS_REGION || 'ap-northeast-2' }}" \
          -var="ami_id=${{ vars.AMI_ID_UBUNTU_2004 }}" \ # 사용하는 AMI ID 변수로 전달 (Variable에 정의 필요)
          -var="vpc_id=${{ vars.VPC_ID_DEV }}" \ # VPC ID 변수로 전달 (Variable에 정의 필요)
          -var="subnet_id=${{ vars.SUBNET_ID_DEV }}" \ # Subnet ID 변수로 전달 (Variable에 정의 필요)
          -var="key_name=${{ vars.SSH_KEY_NAME }}" \ # Key Pair 이름 변수로 전달 (Variable에 정의 필요)
          -var="instance_name=llm-webui-host-${{ github.run_number }}" \ # 인스턴스 이름 동적 생성
          -var="docker_compose_content=${{ base64encode(fromFile('docker-related/docker-compose.yml')) }}" \ # docker-compose.yml 내용 전달
          # 만약 Nginx 설정 파일이 있다면 이 변수도 전달 (이전 A/B 테스트 아키텍처 시)
          # -var="nginx_config_content=${{ base64encode(fromFile('docker-related/nginx/nginx.conf')) }}" \
          -input=false # CI 환경에서는 사용자 입력을 받지 않도록 설정
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          # plan 단계에서도 sensitive 변수는 env로 다시 전달 (plan 결과에는 sensitive로 마스킹됨)
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}

      - name: Terraform Apply
        run: terraform apply \
          -auto-approve \ # 계획 확인 없이 자동으로 승인하고 적용
          -var-file="terraform.tfvars" \
          -var="aws_region=${{ vars.AWS_REGION || 'ap-northeast-2' }}" \
          -var="ami_id=${{ vars.AMI_ID_UBUNTU_2004 }}" \
          -var="vpc_id=${{ vars.VPC_ID_DEV }}" \
          -var="subnet_id=${{ vars.SUBNET_ID_DEV }}" \
          -var="key_name=${{ vars.SSH_KEY_NAME }}" \
          -var="instance_name=llm-webui-host-${{ github.run_number }}" \
          -var="docker_compose_content=${{ base64encode(fromFile('docker-related/docker-compose.yml')) }}" \
          # 만약 Nginx 설정 파일이 있다면 이 변수도 전달
          # -var="nginx_config_content=${{ base64encode(fromFile('docker-related/nginx/nginx.conf')) }}" \
          -input=false
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}

      # 배포 후 확인 단계 (선택 사항)
      # - name: Get EC2 Public IP
      #   id: get_ip
      #   run: |
      #     # Terraform Output에서 인스턴스 Public IP를 가져오는 명령
      #     # (main.tf에 Public IP를 Output으로 정의해야 함)
      #     EC2_IP=$(terraform output -raw instance_public_ip)
      #     echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
      #   working-directory: ${{ env.TF_WORKING_DIR }}
      # - name: Verify Deployment
      #   if: env.EC2_IP != ''
      #   run: |
      #     sleep 60 # 인스턴스 시작 및 Docker Compose 실행 대기
      #     curl -v --max-time 10 http://${{ env.EC2_IP }}:8080
      #   working-directory: ${{ env.TF_WORKING_DIR }}

      # --- 인프라 삭제 (선택 사항, 예를 들어 특정 브랜치 삭제 시) ---
      # on:
      #   pull_request:
      #     types: [closed]
      # if: github.event.pull_request.merged == true
      # jobs:
      #   destroy:
      #     steps:
      #       ... (Checkout, AWS Auth, Setup Terraform, Set Env Vars 동일) ...
      #       - name: Terraform Destroy
      #         run: terraform destroy -auto-approve -var-file="terraform.tfvars" ... (plan/apply와 동일 변수)
      #         working-directory: ${{ env.TF_WORKING_DIR }}
      #         env: ... (동일 환경 변수) ...
