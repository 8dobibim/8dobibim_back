name: Deploy to AWS EC2

on:
  push:
    branches:
      - deploy-test

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TF_WORKING_DIR: ./terraform-related/terraform_code_2

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'ap-northeast-2' }}

      - name: Set Terraform environment variables
        run: |
          echo "TF_VAR_openai_api_key=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_env_file_content=${{ secrets.DOT_ENV_CONTENT }}" >> $GITHUB_ENV
      - name: Set docker-compose content as env var
        run: |
          echo "TF_VAR_docker_compose_content=$(base64 < docker-related/docker-compose.yml | tr -d '\n')" >> $GITHUB_ENV
        
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        run: |
          terraform plan \
            -var-file="terraform.tfvars" \
            -var="aws_region=${{ vars.AWS_REGION || 'ap-northeast-2' }}" \
            -var="ami_id=${{ vars.AMI_ID_UBUNTU_2004 }}" \
            -var="vpc_id=${{ vars.VPC_ID_DEV }}" \
            -var="subnet_id=${{ vars.SUBNET_ID_DEV }}" \
            -var="key_name=${{ vars.SSH_KEY_NAME }}" \
            -var="instance_name=llm-webui-host-${{ github.run_number }}" \
            -var="docker_compose_content=${{ env.TF_VAR_docker_compose_content }}" \
            -input=false
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_env_file_content: ${{ secrets.DOT_ENV_CONTENT }}

      - name: Terraform Apply
        run: |
          terraform apply \
            -auto-approve \
            -var-file="terraform.tfvars" \
            -var="aws_region=${{ vars.AWS_REGION || 'ap-northeast-2' }}" \
            -var="ami_id=ami-0d5bb3742db8fc264" \
            -var="vpc_id=${{ vars.VPC_ID_DEV }}" \
            -var="subnet_id=${{ vars.SUBNET_ID_DEV }}" \
            -var="key_name=${{ vars.SSH_KEY_NAME }}" \
            -var="instance_name=llm-webui-host-${{ github.run_number }}" \
            -var="docker_compose_content=${{ env.TF_VAR_docker_compose_content }}" \
            -input=false
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_env_file_content: ${{ secrets.DOT_ENV_CONTENT }}


      # 배포 후 확인 단계 (선택 사항)
      # - name: Get EC2 Public IP
      #   id: get_ip
      #   run: |
      #     # Terraform Output에서 인스턴스 Public IP를 가져오는 명령
      #     # (main.tf에 Public IP를 Output으로 정의해야 함)
      #     EC2_IP=$(terraform output -raw instance_public_ip)
      #     echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
      #   working-directory: ${{ env.TF_WORKING_DIR }}
      # - name: Verify Deployment
      #   if: env.EC2_IP != ''
      #   run: |
      #     sleep 60 # 인스턴스 시작 및 Docker Compose 실행 대기
      #     curl -v --max-time 10 http://${{ env.EC2_IP }}:8080
      #   working-directory: ${{ env.TF_WORKING_DIR }}

      # --- 인프라 삭제 (선택 사항, 예를 들어 특정 브랜치 삭제 시) ---
      # on:
      #   pull_request:
      #     types: [closed]
      # if: github.event.pull_request.merged == true
      # jobs:
      #   destroy:
      #     steps:
      #       ... (Checkout, AWS Auth, Setup Terraform, Set Env Vars 동일) ...
      #       - name: Terraform Destroy
      #         run: terraform destroy -auto-approve -var-file="terraform.tfvars" ... (plan/apply와 동일 변수)
      #         working-directory: ${{ env.TF_WORKING_DIR }}
      #         env: ... (동일 환경 변수) ...