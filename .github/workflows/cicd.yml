# .github/workflows/cicd.yml
# 이 파일은 프로젝트 루트의 .github/workflows/ 폴더 안에 위치해야 합니다.

name: Deploy Docker Compose to Local Machine # 워크플로우 이름

# main 브랜치에 푸시될 때 실행
on: # 트리거 조건 설정
  push:
    branches: [ main ] # main 브랜치에 push 이벤트 발생 시 실행

jobs: # 작업 정의
  deploy: # 배포 작업 정의 (이름은 원하는 대로 변경 가능)
    name: Deploy to Local Machine # GitHub Actions UI에 표시될 작업 이름
    
    # 중요: 여기서 사용하는 레이블은 로컬 컴퓨터 러너 설정 시 입력한 레이블과 정확히 일치해야 합니다!
    runs-on: [self-hosted, local, windows, docker] # 작업을 실행할 러너 지정 (예: 로컬 Windows 러너)

    # 환경 변수 설정: 워크플로우 내에서 사용할 변수 정의
    env:
      # 중요: 이 경로는 실제 로컬 컴퓨터에서 프로젝트 파일이 위치하고
      # Docker Compose가 실행될 경로로 **반드시** 수정해야 합니다!
      DEPLOY_PATH: C:\Users\Woo\Desktop\TEST\multi_contain # Windows 경로 예시

    steps: # 작업 내 실행될 단계들 정의
      # 1단계: 코드를 러너의 기본 작업 공간에 체크아웃
      - name: Checkout code to workspace # 단계 이름
        uses: actions/checkout@v4 # 표준 체크아웃 액션 사용
        # 'path:' 옵션은 제거하여 기본 경로(${github.workspace})에 체크아웃합니다.

      # 2단계: 작업 공간의 파일을 최종 배포 경로로 복사/동기화 (robocopy 수정됨)
      - name: Copy files to deployment directory
        # robocopy /MIR 옵션으로 원본과 대상 동기화
        # /XD .git : 대상의 .git 폴더는 삭제/변경하지 않음
        # /XF .env : 대상의 .env 파일은 삭제/변경하지 않음
        # /NFL /NDL 등 : 로그 출력 최소화 옵션
        run: robocopy ${{ github.workspace }} ${{ env.DEPLOY_PATH }} /MIR /XD .git /XF .env /NFL /NDL /NJH /NJS /nc /ns /np
        shell: cmd # robocopy는 cmd 셸에서 실행
        # robocopy는 성공(파일 복사됨) 시 종료 코드 1 등을 반환할 수 있음
        # GitHub Actions는 기본적으로 종료 코드 0 외에는 실패로 처리하므로,
        # 성공적인 robocopy 실행(종료 코드 1~7) 후에도 계속 진행하도록 설정
        continue-on-error: true 

      # 3단계: .env 파일 생성 (PowerShell 사용)
      - name: Create .env file
        working-directory: ${{ env.DEPLOY_PATH }} # 작업 디렉토리를 배포 경로로 설정
        # PowerShell을 사용하여 여러 줄 시크릿 내용을 .env 파일에 안정적으로 쓰기
        run: |
          "${{ secrets.DOT_ENV_CONTENT }}" | Out-File -Encoding utf8 .env
          Write-Host ".env file created successfully." # 로그에 성공 메시지 출력 (선택 사항)
        shell: powershell # powershell 셸 사용

      # 4단계: Docker Compose 스택 배포 (PowerShell 사용 권장)
      - name: Deploy Docker Compose Stack
        working-directory: ${{ env.DEPLOY_PATH }} # 작업 디렉토리를 배포 경로로 설정
        # PowerShell 스크립트 실행 (Write-Host로 로그 출력)
        run: |
          Write-Host "Pulling latest images..."
          docker-compose pull
          Write-Host "Stopping and removing old containers..."
          docker-compose down
          Write-Host "Starting new containers..."
          docker-compose up -d
          Write-Host "Cleaning up unused images..."
          docker image prune -f
          Write-Host "Deployment complete."
        shell: powershell # Windows 러너와의 일관성을 위해 powershell 권장
